Bisection Method Implementation in C++


#include<bits/stdc++.h>
using namespace std;
#define f(x) (3*x)-cos(x)-1
int main()
{
 float x0,x1,x,f0,f1,f,e;
 int c=1;
 up:
 cout<<"Enter first guess: ";
 cin>>x0;
 cout<<"Enter second guess: ";
 cin>>x1;
 cout<<"Enter tolerable error: ";
 cin>>e;
 f0=f(x0);
 f1=f(x1);
 if(f0*f1>0.0)
 {
 cout<<"Incorrect Initial Guesses."<< endl;
 goto up;
 }
 do
 {
 x=(x0+x1)/2;
 f=f(x);
 cout<<"Iteration-"<<c<<":\t x = "<<x<<endl;
 if(f0*f<0)
 {
 x1=x;
 }
 else
 {
 x0=x;
 }
 c++;
 }while(fabs(f)>e);
 cout<<endl<<"Root is: "<<x<< endl;
 return 0;
}




Regular Falsi Method Implementation in C++



#include<iostream>
#include<math.h>
#define f(x) (x*x*x)-(2*x)-5
using namespace std;
int main()
{
float x0,x1,x,f0,f1,f,e;
int step = 1;
up:
cout<<"Enter first guess: ";
 cin>>x0;
 cout<<"Enter second guess: ";
 cin>>x1;
 cout<<"Enter tolerable error: ";
 cin>>e;
f0 = f(x0);
f1 = f(x1);
if(f0*f1>0.0)
{
 cout<<"Incorrect Initial Guesses."<< endl;
 goto up;
}
cout<<"False Position Method"<< endl;
do
{
 x=x0-(x0-x1)*f0/(f0-f1);
 f=f(x);
 cout<<"Iteration-"<< step<<":\t x = "<< x<<" and f(x) = "<< f(x)<< endl;
 if(f0*f<0)
 {
 x1=x;
 f1=f;
 }
 else
 {
 x0=x;
 f0=f;
 }
 step = step + 1;
}while(fabs(f)>e);
cout<<endl<<"Root is: "<<x<<endl;
return 0;
}





Newton Rapson Method Implementation in C++


#include<iostream>
#include<math.h>
#include<stdlib.h>
#define f(x) (x*x*x)-(2*x)-5
#define g(x) (3*x*x)-2
using namespace std;
int main()
{
float x0,x1,f0,f1,g0,e;
int step=1,N;
cout<<"Enter initial guess: ";
cin>>x0;
cout<<"Enter tolerable error: ";
cin>>e;
cout<<"Newton Raphson Method"<< endl;
do
{
 g0=g(x0);
 f0=f(x0);
 if(g0 == 0.0)
 {
 cout<<"Mathematical Error.";
 exit(0);
 }
 x1=x0-(f0/g0);
 cout<<"Iteration-"<< step<<":\t x = "<< x1<<" and f(x) = "<< f(x1)<< endl;
 x0=x1;
 step=step+1;
 f1=f(x1);
}while(fabs(f1)>e);
cout<<endl<<"Root is: "<< x1;
return 0;
}




Jacobi Iteration Method Implementation in C++



#include<bits/stdc++.h>
using namespace std;
float val[3][4];
int find_big(int a)
{
 if(fabs(val[a][0])>=fabs(val[a][2])+fabs(val[a][1]))
 {
 return 0;
 }
 if(fabs(val[a][1])>=fabs(val[a][0])+fabs(val[a][2]))
 {
 return 1;
 }
 else
 {
 return 2;
 }
}
void change(int a,int b)
{
 float temp;
 for(int i=0;i<4;i++)
 {
 temp=val[a][i];
 val[a][i]=val[b][i];
 val[b][i]=temp;
 }
}
void rearrange()
{
 for(int i=0; i<3; i++)
 {
 if(find_big(i)!=i)
 {
 change(find_big(i),i);
 }
 }
}
int main()
{
 float e,x,y,z,x1,y1,z1,e1,e2,e3;
 int c=1;
 cout<<"Enter the value(Coefficient) of every equation:"<<endl;
 for(int i=0;i<3;i++)
 {
 for(int j=0;j<4;j++)
 {
 cin>>val[i][j];
 }
 }
 rearrange();
 cout<<"The rearranges equations:"<<endl;
 for(int i=0;i<3;i++)
 {
 for(int j=0;j<4;j++)
 {
 cout<<val[i][j]<<"\t";
 }
 cout<<endl;
 }
 cout<<"Enter Tolarable error: ";
 cin>>e;
 x1=y1=z1=0;
 cout<<"c"<<"\t"<<"x"<<"\t"<<"y"<<"\t"<<"z"<<"\t"<<endl;
 do
 {
 x=(val[0][3]-(val[0][1]*y1)-(val[0][2]*z1))/val[0][0];
 y=(val[1][3]-(val[1][0]*x1)-(val[1][2]*z1))/val[1][1];
 z=(val[2][3]-(val[2][0]*x1)-(val[2][1]*y1))/val[2][2];
 cout<<c<<"\t"<<x<<"\t"<<y<<"\t"<<z<<"\t"<<endl;
 e1=fabs(x1-x);
 e2=fabs(y1-y);
 e3=fabs(z1-z);
 c++;
 x1=x;
 y1=y;
 z1=z;
 }while(e1>e && e2>e && e3>e);
 cout<<endl;
 cout<<"Solutions: "<<endl;
 cout<<"X = "<<x<<endl;
 cout<<"Y = "<<y<<endl;
 cout<<"Z = "<<z<<endl;
 return 0;
}



Gauss Seidal Method Implementation in C++



#include<bits/stdc++.h>
using namespace std;
float val[3][4];
int find_big(int a)
{
 if(fabs(val[a][0])>=fabs(val[a][2])+fabs(val[a][1]))
 {
 return 0;
 }
 if(fabs(val[a][1])>=fabs(val[a][0])+fabs(val[a][2]))
 {
 return 1;
 }
 else
 {
 return 2;
 }
}
void change(int a,int b)
{
 float temp;
 for(int i=0;i<4;i++)
 {
 temp=val[a][i];
 val[a][i]=val[b][i];
 val[b][i]=temp;
 }
}
void rearrange()
{
 for(int i=0; i<3; i++)
 {
 if(find_big(i)!=i)
 {
 change(find_big(i),i);
 }
 }
}
int main()
{
 float e,x,y,z,x1,y1,z1,e1,e2,e3;
 int c=1;
 cout<<"Enter the value(Coefficient) of every equation:"<<endl;
 for(int i=0;i<3;i++)
 {
 for(int j=0;j<4;j++)
 {
 cin>>val[i][j];
 }
 }
 rearrange();
 cout<<"The rearranges equations:"<<endl;
 for(int i=0;i<3;i++)
 {
 for(int j=0;j<4;j++)
 {
 cout<<val[i][j]<<"\t";
 }
 cout<<endl;
 }
 cout<<"Enter Tolarable error: ";
 cin>>e;
 x1=y1=z1=0;
 cout<<"c"<<"\t"<<"x"<<"\t"<<"y"<<"\t"<<"z"<<"\t"<<endl;
 do
 {
 x=(val[0][3]-(val[0][1]*y1)-(val[0][2]*z1))/val[0][0];
 y=(val[1][3]-(val[1][0]*x)-(val[1][2]*z1))/val[1][1];
 z=(val[2][3]-(val[2][0]*x)-(val[2][1]*y))/val[2][2];
 cout<<c<<"\t"<<x<<"\t"<<y<<"\t"<<z<<"\t"<<endl;
 e1=fabs(x1-x);
 e2=fabs(y1-y);
 e3=fabs(z1-z);
 c++;
 x1=x;
 y1=y;
 z1=z;
 }while(e1>e && e2>e && e3>e);
 cout<<endl;
 cout<<"Solutions: "<<endl;
 cout<<"X = "<<x<<endl;
 cout<<"Y = "<<y<<endl;
 cout<<"Z = "<<z<<endl;
 return 0;
}



Newton Forward Interpolation Method Implementation in C++



#include<bits/stdc++.h>
using namespace std;
int main()
{
 float x,u1,u,y;
 int i,j,n,fact;
 cout<<"Enter no. of terms: ";
 cin>>n;
 float a[n][n+1];
 cout<<"Enter Values of X"<<endl;
 for(i=0;i<n;i++)
 cin>>a[i][0];
 cout<<"Enter Values of Y"<<endl;
 for(i=0;i<n;i++)
 cin>>a[i][1];
 cout<<"Enter value of x for which you want y: ";
 cin>>x;
 for(j=2;j<n+1;j++)
 {
 for(i=0;i<n-j+1;i++)
 a[i][j] = a[i+1][j-1]-a[i][j-1];
 }
 cout<<"The Difference Table is as follows:"<<endl;
 for(i=0;i<n;i++)
 {
 for(j=0;j<=n-i;j++)
 cout<<a[i][j]<<" ";
 cout<<endl;
 }
 u=(x-a[0][0])/(a[1][0]-a[0][0]);
 y=a[0][1];
 u1=u;
 fact=1;
 for(i=2;i<=n;i++)
 {
 y=y+(u1*a[0][i])/fact;
 fact=fact*i;
 u1=u1*(u-(i-1));
 }
 cout<<endl<<"Value at X "<<x<<" is "<<y<<endl;
 return 0;
}



Newton Backward Interpolation Method Implementation in C++


#include<bits/stdc++.h>
using namespace std;
int main()
{
 float x,u1,u,y;
 int i,j,n,fact;
 cout<<"Enter no. of terms: ";
 cin>>n;
 float a[n][n+1];
 cout<<"Enter Values of X"<<endl;
 for(i=0;i<n;i++)
 cin>>a[i][0];
 cout<<"Enter Values of Y"<<endl;
 for(i=0;i<n;i++)
 cin>>a[i][1];
 cout<<"Enter value of x for which you want y: ";
 cin>>x;
 for(j=2;j<n+1;j++)
 {
 for(i=0;i<n-j+1;i++)
 a[i][j] = a[i+1][j-1]-a[i][j-1];
 }
 cout<<"The Difference Table is as follows:"<<endl;
 for(i=0;i<n;i++)
 {
 for(j=0;j<=n-i;j++)
 cout<<a[i][j]<<" ";
 cout<<endl;
 }
 u= (x - a[n-1][0])/(a[1][0]-a[0][0]);
 y=a[n-1][1];
 u1=u;
 fact=1;
 j=2;
 for(i=n-2;i>=0;i--)
 {
 y=y+(u1*a[i][j])/fact;
 fact=fact*j;
 u1=u1*(u+(j-1));
 j++;
 }
 cout<<endl<<"Value at X "<<x<<" is "<<y<<endl;
 return 0;
}


Trapezoidal Rule Implementation in C++


#include<iostream>
#include<math.h>
#define f(x) 1/(1+pow(x,2))
using namespace std;
int main()
{
 float lower,upper,integration=0.0,stepSize,k;
 int i,si;
 cout<<"Enter lower limit of integration: ";
 cin>>lower;
 cout<<"Enter upper limit of integration: ";
 cin>>upper;
 cout<<"Enter number of sub intervals: ";
 cin>>si;
 stepSize=(upper-lower)/si;
 integration=f(lower)+f(upper);
 for(i=1;i<=si-1;i++)
 {
 k=lower+i*stepSize;
 integration=integration+2*(f(k));
 }
 integration=integration*stepSize/2;
 cout<< endl<<"Required value of integration is: "<< integration;
 return 0;
}


Simpson One Third Rule Implementation in C++


#include<iostream>
#include<math.h>
#define f(x) 1/(1+pow(x,2))
using namespace std;
int main()
{
 float lower,upper,integration=0.0,stepSize,k;
 int i,si;
 cout<<"Enter lower limit of integration: ";
 cin>>lower;
 cout<<"Enter upper limit of integration: ";
 cin>>upper;
 cout<<"Enter number of sub intervals: ";
 cin>>si;
 stepSize=(upper-lower)/si;
 integration=f(lower)+f(upper);
 for(i=1;i<=si-1;i++)
 {
 k=lower+i*stepSize;
 if(i%2==0)
 {
 integration=integration+2*(f(k));
 }
 else
 {
 integration=integration+4*(f(k));
 }
 }
 integration=integration*stepSize/3;
 cout<<endl<<"Required value of integration is: "<<integration;
 return 0;
}



Simpson Three Eight Rule Implementation in C++


#include<iostream>
#include<math.h>
#define f(x) 1/(1+pow(x,2))
using namespace std;
int main()
{
 float lower,upper,integration=0.0,stepSize,k;
 int i,si;
 cout<<"Enter lower limit of integration: ";
 cin>>lower;
 cout<<"Enter upper limit of integration: ";
 cin>>upper;
 cout<<"Enter number of sub intervals: ";
 cin>>si;
 stepSize=(upper-lower)/si;
 integration=f(lower)+f(upper);
 for(i=1;i<=si-1;i++)
 {
 k=lower+i*stepSize;
 if(i%3==0)
 {
 integration=integration+2*(f(k));
 }
 else
 {
 integration=integration+3*(f(k));
 }
 }
 integration=integration*stepSize*3.0/8.0;
 cout<<endl<<"Required value of integration is: "<<integration;
 return 0;
}


Runge-Kutta Implementation in C++


#include<iostream>
#define f(x,y) (y*y-x*x)/(y*y+x*x)
using namespace std;
int main()
{
 float x0, y0, xn, h, yn, k1, k2, k3, k4, k;
 int i, n;
 cout<<"Enter Initial Condition"<< endl;
 cout<<"x0 = ";
 cin>> x0;
 cout<<"y0 = ";
 cin >> y0;
 cout<<"Enter calculation point xn = ";
 cin>>xn;
 cout<<"Enter number of steps: ";
 cin>> n;
 h = (xn-x0)/n;
 cout<<"\nx0\ty0\tyn\n";
 for(i=0; i < n; i++)
 {
 k1 = h * (f(x0, y0));
 k2 = h * (f((x0+h/2), (y0+k1/2)));
 k3 = h * (f((x0+h/2), (y0+k2/2)));
 k4 = h * (f((x0+h), (y0+k3)));
 k = (k1+2*k2+2*k3+k4)/6;
 yn = y0 + k;
 cout<< x0<<"\t"<< y0<<"\t"<< yn<< endl;
 x0 = x0+h;
 y0 = yn;
 }
 cout<<"\nValue of y at x = "<< xn<< " is " << yn;
 return 0;
}



Straight Line Implementation in C++


#include<iostream>
#include<math.h>
#define S 50
using namespace std;
int main()
{
 int n, i;
 float x[S], y[S], sumX=0, sumX2=0, sumY=0, sumXY=0, a, b, A;
 cout<<"How many data points? " << endl;
 cin >> n;
 for(i=1;i<=n;i++)
 {
 cout << "x["<< i <<"] = ";
 cin >> x[i];
 cout << "y["<< i <<"] = ";
 cin >> y[i];
 }
 for(i=1;i<=n;i++)
 {
 sumX = sumX + log(x[i]);
 sumX2 = sumX2 + log(x[i])*log(x[i]);
 sumY = sumY + log(y[i]);
 sumXY = sumXY + log(x[i])*log(y[i]);
 }
 b = (n*sumXY-sumX*sumY)/(n*sumX2-sumX*sumX);
 A = (sumY - b*sumX)/n;
 a = exp(A);
 cout << "Values are: a = " << a << " and b = " << b;
 return 0;
}